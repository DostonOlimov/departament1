<?php

namespace common\models\control;

use common\models\User;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\helpers\VarDumper;

/**
 * This is the model class for table "control_measures".
 *
 * @property int $id
 * @property int $control_company_id
 * @property int|null $type
 * @property int|null $date
 * @property int|null $quantity
 * @property int|null $amount
 * @property string|null $person
 * @property string|null $number_passport
 * @property int|null $fine_amount
 * @property int $created_by
 * @property int $updated_by
 * @property int $created_at
 * @property int $updated_at
 *
 * @property Company $controlCompany
 * @property User $createdBy
 * @property User $updatedBy
 */
class Measure extends \yii\db\ActiveRecord
{

    public $typeChange;

    const TYPE_INSTRUMENT = 1;
    const TYPE_REALIZATION = 2;
    const TYPE_ADMINISTRATIVE = 3;
    const TYPE_ECONOMIC = 4;
    const TYPE_RELEASE = 5;

    public static function tableName()
    {
        return 'control_measures';
    }

    public function rules()
    {
        return [
            [['control_company_id'], 'required'],
            [['control_company_id', 'quantity', 'ov_quantity', 'amount', 'fine_amount'], 'integer'],
            [['ov_name', 'person', 'number_passport', 'date', 'ov_date'], 'string', 'max' => 255],
            [['type'], 'safe'],
            [['control_company_id'], 'exist', 'skipOnError' => true, 'targetClass' => Company::className(), 'targetAttribute' => ['control_company_id' => 'id']],
            /*[['amount', 'date', 'quantity'], 'required', 'when' => function($model) {
                return $model->type != self::TYPE_ADMINISTRATIVE;
            },'whenClient' => "function (attribute, value) {
                    return $('#type').val() != 3;
            }"],
            [['person', 'number_passport', 'fine_amount'], 'required', 'when' => function($model) {
                return $model->type == self::TYPE_ADMINISTRATIVE;
            },'whenClient' => "function (attribute, value) {
                    return $('#type').val() == 3;
            }"],*/
        ];
    }

    public static function typeList($type = null)
    {
        $arr = [
            self::TYPE_INSTRUMENT => 'O\'lchov vositalarini taqiqlash',
            self::TYPE_REALIZATION => 'Realizatsiyani taqiqlash',
            self::TYPE_ADMINISTRATIVE => 'Ma`muriy jarima',
            self::TYPE_ECONOMIC => 'Iqtisodiy jarima',
            self::TYPE_RELEASE => 'Savdodan chiqarish',
        ];

        if ($type === null) {
            return $arr;
        }

        return $arr[$type];
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'control_company_id' => 'Control Company ID',
            'type' => 'Ko\'rilgan ta`sir choralar',
            'date' => 'Sana',
            'quantity' => 'Miqdor',
            'amount' => 'Summa',
            'ov_date' => 'O\'lchov vositasini taqiqlash sanasi',
            'ov_quantity' => 'O\'lchov vositalarini taqiqlash miqdori',
            'ov_name' => 'O\'lchov vositalarini taqiqlash nomi',
            'person' => 'Jarimaga tortilgan shaxs F.I.O',
            'number_passport' => 'Passport seriya',
            'fine_amount' => 'Jarima summasi',

            'created_by' => 'Created By',
            'updated_by' => 'Updated By',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    public function behaviors()
    {
        return [
            TimestampBehavior::class,
            BlameableBehavior::class,
        ];
    }

    public function beforeSave($insert)
    {
        $this->date = strtotime($this->date);
        $this->ov_date = strtotime($this->ov_date);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        $this->date = $this->date ? Yii::$app->formatter->asDate($this->date, 'M/dd/yyyy') : $this->date;
        $this->ov_date = $this->ov_date ? Yii::$app->formatter->asDate($this->ov_date, 'M/dd/yyyy') : $this->ov_date;
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function getControlCompany()
    {
        return $this->hasOne(Company::className(), ['id' => 'control_company_id']);
    }

    public function getCreatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'created_by']);
    }

    public function getUpdatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'updated_by']);
    }
}
